name: Build Obfuscate BPB Panel

on:
push:
branches:
- main
schedule:
# 每天早上1点运行
- cron: "0 1 * * *"

permissions:
contents: write

jobs:
build:
runs-on: ubuntu-latest

steps:
  - name: Check out the code (Your Repository)
    uses: actions/checkout@v4

  - name: Set up Python and Node.js
    uses: actions/setup-python@v5
    with:
      python-version: '3.10'

  - name: Set up Node.js
    uses: actions/setup-node@v4
    with:
      node-version: "latest"

  - name: Clone BPB Worker Panel Repository
    run: git clone --depth 1 https://github.com/bia-pain-bache/BPB-Worker-Panel.git bpb-panel

  - name: Build BPB worker js
    run: |
      # 进入BPB仓库目录
      cd bpb-panel
      # 安装依赖
      npm install
      # 运行构建命令以生成 worker.js
      npm run build
  
  - name: Create custom obfuscation script
    run: |
      cat > obfuscator.py << 'EOF'

import sys
import re
import random
import string
import base64

class CustomObfuscator:
def init(self, code):
self.code = code
self.renaming_map = {}
self.string_map = {}
self.key = self._generate_unique_key()

def _generate_unique_key(self):
    """生成一个唯一的混淆密钥，确保混淆结果专属唯一"""
    return ''.join(random.choices(string.ascii_letters + string.digits, k=16))

def _xor_encrypt(self, text):
    """使用异或运算加密字符串"""
    encrypted = ""
    for i, char in enumerate(text):
        encrypted += chr(ord(char) ^ ord(self.key[i % len(self.key)]))
    return base64.b64encode(encrypted.encode('latin-1')).decode('utf-8')

def _obfuscate_strings(self):
    """混淆代码中的所有字符串"""
    # 匹配单引号和双引号的字符串
    pattern = r'(\"[^\"]*\")|(\'[^\']*\')'
    matches = re.finditer(pattern, self.code)
    
    for match in matches:
        original_string = match.group(0).strip('\'"')
        if original_string:
            encrypted_base64 = self._xor_encrypt(original_string)
            self.string_map[encrypted_base64] = original_string
            # 用一个独特的函数调用来代替原始字符串
            new_string_call = f"__decrypt_string__('{encrypted_base64}')"
            self.code = self.code.replace(match.group(0), new_string_call, 1)

def _inject_junk_code(self):
    """注入无意义的代码，增加阅读难度"""
    junk_line = f"const __junk_var__ = '{self.key}';\n"
    junk_line += "if (Math.random() > 1) { console.log('This will never run.'); }\n"
    self.code = junk_line + self.code
    
def _prepend_decryption_function(self):
    """在代码头部添加解密函数和密钥"""
    decrypt_function = f"""

const xor_key = '{self.key}';
const decrypt_string = (base64Str) => {{
let result = '';
const encrypted = Buffer.from(base64Str, 'base64').toString('latin1');
for (let i = 0; i < encrypted.length; i++) {{
result += String.fromCharCode(encrypted.charCodeAt(i) ^ xor_key.charCodeAt(i % xor_key.length));
}}
return result;
}};
"""
self.code = f"// 专属混淆时间: {self.key}\n" + decrypt_function + self.code

def run(self):
    self._obfuscate_strings()
    self._prepend_decryption_function()
    self._inject_junk_code()
    return self.code

--- 执行脚本 ---
if name == "main":
if len(sys.argv) < 3:
print("用法: python obfuscator.py <输入文件路径> <输出文件路径>")
sys.exit(1)

input_file = sys.argv[1]
output_file = sys.argv[2]

try:
    with open(input_file, 'r', encoding='utf-8') as f:
        js_code = f.read()
    
    # 检查代码是否已经包含专属混淆标记，防止重复混淆
    if '专属混淆时间' not in js_code:
        obfuscator = CustomObfuscator(js_code)
        obfuscated_code = obfuscator.run()
        
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(obfuscated_code)
        
        print("混淆完成，已保存到 _worker.js")
    else:
        print("代码已混淆，跳过混淆步骤。")

except Exception as e:
    print(f"混淆过程中发生错误: {{e}}")
    raise

'EOF'

  - name: Obfuscate BPB worker with custom script
    # 使用新生成的 worker.js 作为输入
    run: python obfuscator.py bpb-panel/dist/worker.js _worker.js

  - name: Commit changes
    uses: stefanzweifel/git-auto-commit-action@v5
    with:
      branch: main
      commit_message: ':arrow_up: update latest bpb panel'
      commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
      push_options: '--set-upstream'
