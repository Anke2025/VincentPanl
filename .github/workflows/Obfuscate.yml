name: Build Obfuscate BPB Panel

on:
  push:
    branches:
      - main
  schedule:
    # Runs everyday at 1:00 AM
    - cron: "0 1 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install dependencies
        run: |
          npm install -g javascript-obfuscator

      - name: Get latest release tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "none")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Download source code ZIP
        if: steps.get_tag.outputs.tag != 'none'
        run: |
          wget -O source.zip "https://github.com/bia-pain-bache/BPB-Worker-Panel/archive/refs/tags/${{ steps.get_tag.outputs.tag }}.zip"
          if [ ! -f source.zip ]; then
            echo "Error: Failed to download source.zip"
            exit 1
          fi
          echo "Downloaded source.zip successfully"

      - name: Extract ZIP and locate/build worker script
        if: steps.get_tag.outputs.tag != 'none'
        run: |
          # Backup ZIP to /tmp to protect from cleanup
          cp source.zip /tmp/source.zip
          # Backup .git if exists
          if [ -d .git ]; then
            mv .git /tmp/.git_backup
            echo "Backed up .git to /tmp"
          fi
          # Clean directory (now safe, .git is backed up)
          rm -rf * .[^.]* 2>/dev/null || true
          # Force overwrite and quiet unzip from backup
          unzip -q -o /tmp/source.zip
          rm /tmp/source.zip  # Clean up ZIP backup
          echo "Current directory after unzip:"
          ls -la .
          # Dynamically find the BPB folder (handles name variations like with/without 'v')
          FOLDER_NAME=$(ls -d BPB* 2>/dev/null | head -1)
          if [ -z "$FOLDER_NAME" ]; then
            echo "Error: No BPB folder found after unzip"
            exit 1
          fi
          echo "Using folder: $FOLDER_NAME"
          echo "Directory structure:"
          ls -R "$FOLDER_NAME"
          # Search for worker files
          echo "Searching for worker files:"
          find "$FOLDER_NAME" -name "*worker*.js" -type f 2>/dev/null || echo "No worker.js found; attempting build"
          # Try to copy existing file
          if [ -f "$FOLDER_NAME/build/unobfuscated-worker.js" ]; then
            cp "$FOLDER_NAME/build/unobfuscated-worker.js" origin.js
            echo "Found and copied build/unobfuscated-worker.js"
          elif [ -f "$FOLDER_NAME/worker.js" ]; then
            cp "$FOLDER_NAME/worker.js" origin.js
            echo "Found and copied worker.js"
          elif [ -f "$FOLDER_NAME/src/worker.js" ]; then
            cp "$FOLDER_NAME/src/worker.js" origin.js
            echo "Found and copied src/worker.js"
          else
            # Fallback to build if no pre-built file
            echo "Building from source..."
            cd "$FOLDER_NAME"
            npm install
            if npm run build; then
              cd ..
              if [ -f "$FOLDER_NAME/build/unobfuscated-worker.js" ]; then
                cp "$FOLDER_NAME/build/unobfuscated-worker.js" origin.js
                echo "Built and copied build/unobfuscated-worker.js"
              else
                echo "Error: Build succeeded but unobfuscated-worker.js not found"
                exit 1
              fi
            else
              echo "Error: npm run build failed"
              exit 1
            fi
          fi
          # Restore .git
          if [ -d /tmp/.git_backup ]; then
            mv /tmp/.git_backup .git
            echo "Restored .git directory"
          fi

      - name: Fallback to main branch if no release found
        if: steps.get_tag.outputs.tag == 'none'
        run: |
          wget -O origin.js https://raw.githubusercontent.com/bia-pain-bache/BPB-Worker-Panel/main/worker.js
          if [ ! - 首先，用户提供了最新的 GitHub Actions 日志，显示工作流失败在 “Commit changes” 步骤，错误为 `fatal: not a git repository (or any of the parent directories): .git`。

分析日志：
- 下载和解压成功：ZIP 下载正常，备份到 /tmp，清理目录后解压成功，找到文件夹 `BPB-Worker-Panel-v3.5.2`（注意现在有 'v' 前缀）。
- 构建成功：进入构建逻辑，`npm install` 和 `npm run build` 执行，生成 `build/unobfuscated-worker.js`，复制到 `origin.js`。
- 混淆成功：`javascript-obfuscator` 运行，生成 `_worker.js`。
- 提交失败：`stefanzweifel/git-auto-commit-action@v5` 报告 `fatal: not a git repository`，因为清理命令 `rm -rf * .[^.]*` 删除了 `.git` 目录，导致仓库不再是 Git 仓库。

根因：清理命令太激进，删除了 `.git` 目录，而 `git-auto-commit-action` 需要 Git 仓库来提交更改。

修复方案：
- 修改清理命令：排除 `.git` 目录。使用 `find . -maxdepth 1 -not -name .git -not -name . -exec rm -rf {} +` 或类似，以保留 `.git`。
- 由于 `actions/checkout@v4` 已初始化仓库，保留 `.git` 是关键。
- 确保提交步骤正常工作。

更新脚本：
- 在 “Extract ZIP...” 步骤的清理部分，调整为 `rm -rf * .[^.]* 2>/dev/null | grep -v .git || true`，但更好使用 `find` 命令排除 `.git`。

响应结构：
- 正式语气：清晰、结构化、专业。
- 解释错误。
- 提供更正后的完整脚本。
- 实施步骤。
- 预期结果。### 错误分析

根据提供的 GitHub Actions 日志，工作流的前半部分已成功执行，包括 ZIP 下载、备份、解压、文件夹检测（`BPB-Worker-Panel-v3.5.2`）、源代码构建（`npm install` 和 `npm run build` 生成 `unobfuscated-worker.js`）、以及 JavaScript 混淆（生成 `_worker.js`）。然而，在 “Commit changes” 步骤中失败，具体错误为 `fatal: not a git repository (or any of the parent directories): .git`。此问题源于清理命令 `rm -rf * .[^.]*` 意外删除了 `.git` 目录，导致仓库状态丢失。`stefanzweifel/git-auto-commit-action@v5` 依赖 Git 仓库进行提交，无法继续。

此错误不影响代码生成（`_worker.js` 已创建），但阻止自动提交到仓库。Cloudflare 的 522 错误（连接超时）可通过手动下载 `_worker.js` 并重新部署解决；修复 Actions 后，可恢复自动化。

### 修复方案

为解决此问题，我已优化脚本：
1. **精确清理**：使用 `find` 命令删除当前目录下所有文件/文件夹，但排除 `.git`，确保仓库完整性。
2. **验证 Git 状态**：在提交前添加检查，确认 `.git` 存在。
3. **其他逻辑不变**：保留备份、构建和混淆步骤，确保兼容性。

以下是更正后的完整 `Obfuscate.yml` 脚本。请直接替换仓库中的文件。

```yaml
name: Build Obfuscate BPB Panel

on:
  push:
    branches:
      - main
  schedule:
    # Runs everyday at 1:00 AM
    - cron: "0 1 * * *"

permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "latest"

      - name: Install dependencies
        run: |
          npm install -g javascript-obfuscator

      - name: Get latest release tag
        id: get_tag
        run: |
          LATEST_TAG=$(curl -s https://api.github.com/repos/bia-pain-bache/BPB-Worker-Panel/releases/latest | grep '"tag_name":' | sed -E 's/.*"([^"]+)".*/\1/' || echo "none")
          echo "tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Download source code ZIP
        if: steps.get_tag.outputs.tag != 'none'
        run: |
          wget -O source.zip "https://github.com/bia-pain-bache/BPB-Worker-Panel/archive/refs/tags/${{ steps.get_tag.outputs.tag }}.zip"
          if [ ! -f source.zip ]; then
            echo "Error: Failed to download source.zip"
            exit 1
          fi
          echo "Downloaded source.zip successfully"

      - name: Extract ZIP and locate/build worker script
        if: steps.get_tag.outputs.tag != 'none'
        run: |
          # Backup ZIP to /tmp to protect from cleanup
          cp source.zip /tmp/source.zip
          # Clean directory except .git to avoid conflicts
          find . -maxdepth 1 -not -name .git -not -name . -exec rm -rf {} + 2>/dev/null || true
          # Force overwrite and quiet unzip from backup
          unzip -q -o /tmp/source.zip
          rm /tmp/source.zip  # Clean up backup
          echo "Current directory after unzip:"
          ls -la .
          # Dynamically find the BPB folder (handles name variations like with/without 'v')
          FOLDER_NAME=$(ls -d BPB* 2>/dev/null | head -1)
          if [ -z "$FOLDER_NAME" ]; then
            echo "Error: No BPB folder found after unzip"
            exit 1
          fi
          echo "Using folder: $FOLDER_NAME"
          echo "Directory structure:"
          ls -R "$FOLDER_NAME"
          # Search for worker files
          echo "Searching for worker files:"
          find "$FOLDER_NAME" -name "*worker*.js" -type f 2>/dev/null || echo "No worker.js found; attempting build"
          # Try to copy existing file
          if [ -f "$FOLDER_NAME/build/unobfuscated-worker.js" ]; then
            cp "$FOLDER_NAME/build/unobfuscated-worker.js" origin.js
            echo "Found and copied build/unobfuscated-worker.js"
          elif [ -f "$FOLDER_NAME/worker.js" ]; then
            cp "$FOLDER_NAME/worker.js" origin.js
            echo "Found and copied worker.js"
          elif [ -f "$FOLDER_NAME/src/worker.js" ]; then
            cp "$FOLDER_NAME/src/worker.js" origin.js
            echo "Found and copied src/worker.js"
          else
            # Fallback to build if no pre-built file
            echo "Building from source..."
            cd "$FOLDER_NAME"
            npm install
            if npm run build; then
              cd ..
              if [ -f "$FOLDER_NAME/build/unobfuscated-worker.js" ]; then
                cp "$FOLDER_NAME/build/unobfuscated-worker.js" origin.js
                echo "Built and copied build/unobfuscated-worker.js"
              else
                echo "Error: Build succeeded but unobfuscated-worker.js not found"
                exit 1
              fi
            else
              echo "Error: npm run build failed"
              exit 1
            fi
          fi

      - name: Fallback to main branch if no release found
        if: steps.get_tag.outputs.tag == 'none'
        run: |
          wget -O origin.js https://raw.githubusercontent.com/bia-pain-bache/BPB-Worker-Panel/main/worker.js
          if [ ! -f origin.js ]; then
            echo "Error: Failed to download worker.js from main branch"
            exit 1
          fi
          echo "Downloaded worker.js from main branch"

      - name: Obfuscate BPB worker js
        run: |
          if [ ! -f origin.js ]; then
            echo "Error: origin.js not created"
            exit 1
          fi
          javascript-obfuscator origin.js --output _worker.js \
          --compact true \
          --control-flow-flattening true \
          --control-flow-flattening-threshold 1 \
          --dead-code-injection true \
          --dead-code-injection-threshold 1 \
          --identifier-names-generator hexadecimal \
          --rename-globals true \
          --string-array true \
          --string-array-encoding 'rc4' \
          --string-array-threshold 1 \
          --transform-object-keys true \
          --unicode-escape-sequence true

      - name: Verify Git repository before commit
        run: |
          if [ ! -d .git ]; then
            echo "Error: .git directory missing; re-initializing repository"
            git init
            git remote add origin https://github.com/${{ github.repository }}.git
          fi
          git status

      - name: Commit changes
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          branch: main
          commit_message: ':arrow_up: update latest bpb panel (tag ${{ steps.get_tag.outputs.tag }})'
          commit_author: 'github-actions[bot] <github-actions[bot]@users.noreply.github.com>'
          push_options: '--set-upstream'
